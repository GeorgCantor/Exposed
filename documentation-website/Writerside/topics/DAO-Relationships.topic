<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
        SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Relationships" id="DAO-Relationships">
    <show-structure for="chapter" depth="2" />

    <chapter title="Many-to-one" id="Many-to-one">
        <p>Let's say you have this table:</p>
        <code-block lang="kotlin"><![CDATA[
            object Users : IntIdTable() {
                val name = varchar("name", 50)
            }
            class User(id: EntityID<Int>) : IntEntity(id) {
                companion object : IntEntityClass<User>(Users)

                var name by Users.name
            }
        ]]></code-block>
        <p>And now you want to add a table referencing this table (and other tables!):</p>

        <code-block lang="kotlin"><![CDATA[
            object UserRatings : IntIdTable() {
                val value = long("value")
                val film = reference("film", StarWarsFilms)
                val user = reference("user", Users)
            }
            class UserRating(id: EntityID<Int>) : IntEntity(id) {
                companion object : IntEntityClass<UserRating>(UserRatings)

                var value by UserRatings.value
                var film by StarWarsFilm referencedOn UserRatings.film // use referencedOn for normal references
                var user by User referencedOn UserRatings.user
            }
        ]]></code-block>
        <p>Now you can get the film for a <code>UserRating</code> object, <code>filmRating</code>, in the same way you would get any other field:</p>

        <code-block lang="kotlin">
            filmRating.film // returns a StarWarsFilm object
        </code-block>
        <p>Now if you wanted to get all the ratings for a film, you could do that by using the <code>filmRating.find</code> function, but it is much easier to
            just add a <code>referrersOn</code> field to the <code>StarWarsFilm</code> class:</p>

        <code-block lang="kotlin"><![CDATA[
            class StarWarsFilm(id: EntityID<Int>) : IntEntity(id) {
                companion object : IntEntityClass<StarWarsFilm>(StarWarsFilms)
                //...
                val ratings by UserRating referrersOn UserRatings.film // make sure to use val and referrersOn
                //...
            }
        ]]></code-block>
        <p>You can then access this field on a <code>StarWarsFilm</code> object, <code>movie</code>:</p>

        <code-block lang="kotlin">
            movie.ratings // returns all UserRating objects with this movie as film
        </code-block>
        <p>Now imagine a scenario where a user only ever rates a single film. If you want to get the single rating for that user, you can add a <code>backReferencedOn</code>
            field to the <code>User</code> class to access the <code>UserRating</code> table data:</p>

        <code-block lang="kotlin"><![CDATA[
            class User(id: EntityID<Int>) : IntEntity(id) {
                companion object : IntEntityClass<User>(Users)
                //...
                val rating by UserRating backReferencedOn UserRatings.user // make sure to use val and backReferencedOn
            }
        ]]></code-block>
        <p>You can then access this field on a <code>User</code> object, <code>user1</code>:</p>

        <code-block lang="kotlin">
            user1.rating // returns a UserRating object
        </code-block>
    </chapter>
    <chapter title="Optional reference" id="optional-reference">
        <p>You can also add an optional reference:</p>

        <code-block lang="kotlin"><![CDATA[
            object UserRatings : IntIdTable() {
                //...
                val secondUser = reference("second_user", Users).nullable() // this reference is nullable!
                //...
            }
            class UserRating(id: EntityID<Int>) : IntEntity(id) {
                companion object : IntEntityClass<UserRating>(UserRatings)
                //...
                var secondUser by User optionalReferencedOn UserRatings.secondUser // use optionalReferencedOn for nullable references
                //...
            }
        ]]></code-block>
        <p>Now <code>secondUser</code> will be a nullable field, and <code>optionalReferrersOn</code> should be used instead of <code>referrersOn</code> to get
            all the ratings for a <code>secondUser</code>.</p>

        <code-block lang="kotlin"><![CDATA[
            class User(id: EntityID<Int>) : IntEntity(id) {
                companion object : IntEntityClass<User>(Users)
                //...
                val secondRatings by UserRating optionalReferrersOn UserRatings.secondUser // make sure to use val and optionalReferrersOn
                //...
            }
        ]]></code-block>
    </chapter>
    <chapter title="Ordered reference" id="ordered-reference">
        <p>You can also define the order in which referenced entities appear:</p>

        <code-block lang="kotlin"><![CDATA[
            class User(id: EntityID<Int>) : IntEntity(id) {
                companion object : IntEntityClass<User>(Users)

                //...
                val ratings by UserRating referrersOn UserRatings.user orderBy UserRatings.value
                //...
            }
        ]]></code-block>
        <p>In a more complex scenario, you can specify multiple columns along with the corresponding sort order for each:</p>

        <code-block lang="kotlin"><![CDATA[
            class User(id: EntityID<Int>) : IntEntity(id) {
                companion object : IntEntityClass<User>(Users)

                //...
                val ratings by UserRating referrersOn UserRatings.user orderBy listOf(UserRatings.value to SortOrder.DESC, UserRatings.id to SortOrder.ASC)
                //...
            }
        ]]></code-block>
        <p>Without using the <a href="https://kotlinlang.org/docs/functions.html#infix-notation">infix notation</a>, the <code>orderBy</code> method is chained
            after <code>referrersOn</code>:</p>

        <code-block lang="kotlin"><![CDATA[
            class User(id: EntityID<Int>) : IntEntity(id) {
                companion object : IntEntityClass<User>(Users)

                //...
                val ratings by UserRating.referrersOn(UserRatings.user)
                    .orderBy(UserRatings.value to SortOrder.DESC, UserRatings.id to SortOrder.ASC)
                //...
            }
        ]]></code-block>
    </chapter>
    <chapter title="Many-to-many reference" id="many-to-many-reference">
        <p>In some cases, a many-to-many reference may be required.
            Let's assume you want to add a reference to the following Actors table to the StarWarsFilm class:</p>

        <code-block lang="kotlin"><![CDATA[
            object Actors : IntIdTable() {
                val firstname = varchar("firstname", 50)
                val lastname = varchar("lastname", 50)
            }
            class Actor(id: EntityID<Int>) : IntEntity(id) {
                companion object : IntEntityClass<Actor>(Actors)

                var firstname by Actors.firstname
                var lastname by Actors.lastname
            }
        ]]></code-block>
        <p>Create an additional intermediate table to store the references:</p>

        <code-block lang="kotlin">
            object StarWarsFilmActors : Table() {
                val starWarsFilm = reference("starWarsFilm", StarWarsFilms)
                val actor = reference("actor", Actors)
                override val primaryKey = PrimaryKey(starWarsFilm, actor, name = "PK_StarWarsFilmActors_swf_act") // PK_StarWarsFilmActors_swf_act is optional here
            }
        </code-block>
        <p>Add a reference to <code>StarWarsFilm</code>:</p>

        <code-block lang="kotlin"><![CDATA[
            class StarWarsFilm(id: EntityID<Int>) : IntEntity(id) {
                companion object : IntEntityClass<StarWarsFilm>(StarWarsFilms)
                //...
                var actors by Actor via StarWarsFilmActors
                //...
            }
        ]]></code-block>
        <p>Note: You can set up IDs manually inside a transaction like this:</p>

        <code-block lang="kotlin">
            transaction {
                // only works with UUIDTable and UUIDEntity
                StarWarsFilm.new (UUID.randomUUID()){
                    //...
                    actors = SizedCollection(listOf(actor))
                }
            }
        </code-block>
    </chapter>
    <chapter title="Parent-Child reference" id="parent-child-reference">
        <p>Parent-child reference is very similar to many-to-many version, but an intermediate table contains both references to the same table.
            Let's assume you want to build a hierarchical entity which could have parents and children. Our tables and an entity mapping will look like</p>

        <code-block lang="kotlin"><![CDATA[
            object NodeTable : IntIdTable() {
                val name = varchar("name", 50)
            }
            object NodeToNodes : Table() {
                val parent = reference("parent_node_id", NodeTable)
                val child = reference("child_user_id", NodeTable)
            }
            class Node(id: EntityID<Int>) : IntEntity(id) {
                companion object : IntEntityClass<Node>(NodeTable)

                var name by NodeTable.name
                var parents by Node.via(NodeToNodes.child, NodeToNodes.parent)
                var children by Node.via(NodeToNodes.parent, NodeToNodes.child)
            }
        ]]></code-block>
        <p>As you can see <code>NodeToNodes</code> columns target only <code>NodeTable</code> and another version of <code>via</code> function were used.
            Now you can create a hierarchy of nodes.</p>

        <code-block lang="kotlin">
            val root = Node.new { name = "root" }
            val child1 = Node.new {
                name = "child1"
            }
            child1.parents = SizedCollection(root) // assign parent
            val child2 = Node.new { name = "child2" }
            root.children = SizedCollection(listOf(child1, child2)) // assign children
        </code-block>
    </chapter>
    <chapter title="Composite primary key reference" id="composite-primary-key-reference">
        <p>Assuming that we have the following <code>CompositeIdTable</code>:</p>

        <code-block lang="kotlin"><![CDATA[
            object Directors : CompositeIdTable("directors") {
                val name = varchar("name", 50).entityId()
                val guildId = uuid("guild_id").autoGenerate().entityId()
                val genre = enumeration<Genre>("genre")

                override val primaryKey = PrimaryKey(name, guildId)
            }

            class Director(id: EntityID<CompositeID>) : CompositeEntity(id) {
                companion object : CompositeEntityClass<Director>(Directors)

                var genre by Directors.genre
            }
        ]]></code-block>
        <p>We can refactor the <code>StarWarsFilms</code> table to reference this table by adding columns to hold the appropriate primary key values and creating
            a table-level foreign key constraint:</p>

        <code-block lang="kotlin"><![CDATA[
            object StarWarsFilms : IntIdTable() {
                val sequelId = integer("sequel_id").uniqueIndex()
                val name = varchar("name", 50)
                val directorName = varchar("director_name", 50)
                val directorGuildId = uuid("director_guild_id")

                init {
                    foreignKey(directorName, directorGuildId, target = Directors.primaryKey)
                }
            }

            class StarWarsFilm(id: EntityID<Int>) : IntEntity(id) {
                companion object : IntEntityClass<StarWarsFilm>(StarWarsFilms)

                var sequelId by StarWarsFilms.sequelId
                var name by StarWarsFilms.name
                var director by Director referencedOn StarWarsFilms
            }
        ]]></code-block>
        <tip>For more information on creating table foreign key constraints, see <a href="Working-with-Tables.topic#foreign-key">DSL Foreign Key</a>.</tip>
        <p>Now you can get the director for a <code>StarWarsFilm</code> object, <code>movie</code>, in the same way you would get any other field:</p>

        <code-block lang="kotlin">
            movie.director // returns a Director object
        </code-block>
        <p>Now if you wanted to get all the films made by a director, you could add a <code>referrersOn</code> field to the <code>Director</code> class:</p>

        <code-block lang="kotlin"><![CDATA[
            class Director(id: EntityID<CompositeID>) : CompositeEntity(id) {
                companion object : CompositeEntityClass<Director>(Directors)

                var genre by Directors.genre
                val films by StarWarsFilm referrersOn StarWarsFilms
            }
        ]]></code-block>
        <p>You can then access this field on a <code>Director</code> object, <code>director</code>:</p>

        <code-block lang="kotlin">
            director.films // returns all StarWarsFilm objects that reference this director
        </code-block>
        <p>Using other previously mentioned <a href="https://kotlinlang.org/docs/functions.html#infix-notation">infix functions</a>,
            like <code>optionalReferencedOn</code>, <code>backReferencedOn</code>, and <code>optionalReferrersOn</code>, is also supported for referencing or
            referenced <code>CompositeEntity</code> objects,
            by using the respective overloads that accept an <code>IdTable</code> as an argument.
            These overloads will automatically resolve the foreign key constraint associated with the composite primary key.</p>
    </chapter>
    <chapter title="Eager Loading" id="eager-loading">
        <p>References in Exposed are lazily loaded, meaning queries to fetch the data for the reference are made at the moment the reference is first utilised.
            For scenarios wherefore you know you will require references ahead of time, Exposed can eager load them at the time of the parent query, this is
            prevents the classic &quot;N+1&quot; problem as references can be aggregated and loaded in a single query.
            To eager load a reference you can call the &quot;load&quot; function and pass the DAO's reference as a KProperty:</p>

        <code-block lang="kotlin">
            StarWarsFilm.findById(1).load(StarWarsFilm::actors)
        </code-block>
        <p>This works for references of references also, for example if Actors had a rating reference you could:</p>
        <code-block lang="kotlin">
            StarWarsFilm.findById(1).load(StarWarsFilm::actors, Actor::rating)
        </code-block>
        <p>Similarly, you can eagerly load references on Collections of DAO's such as Lists and SizedIterables, for collections you can use the with function in
            the same fashion as before, passing the DAO's references as KProperty's.
        </p>
        <code-block lang="kotlin">
            StarWarsFilm.all().with(StarWarsFilm::actors)
        </code-block>
        <note>
            References that are eagerly loaded are stored inside the transaction cache;
            this means that they are not available in other transactions
            and thus must be loaded and referenced inside the same transaction.
            As of <a href="https://github.com/JetBrains/Exposed/blob/main/CHANGELOG.md#0351">0.35.1</a>,
            enabling <code>keepLoadedReferencesOutOfTransaction</code> in <code>DatabaseConfig</code>
            will allow getting referenced values outside the transaction block.
        </note>
        <chapter title="Eager loading for Text Fields" id="eager-loading-for-text-fields">
            <p>Some database drivers do not load text content immediately (for performance and memory reasons) which means that you can obtain the column value
                only within the open transaction.</p>
            <p>If you desire to make content available outside the transaction, you can use the eagerLoading param when defining the DB Table.</p>

            <code-block lang="kotlin">
                object StarWarsFilms : Table() {
                    //...
                    val description = text("name", eagerLoading=true)
                }
            </code-block>
        </chapter>
    </chapter>
</topic>
